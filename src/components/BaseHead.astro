---
// Import the global.css file here so that it is included on
// all pages through the use of the <BaseHead /> component.
import "../styles/global.scss";

export interface Props {
    title: string;
    description: string;
    canonical?: string;
    publishDate?: string;
    modifiedDate?: string;
    type?: "website" | "article";
    tags?: string[];
    author?: string;
    lang?: string;
}

const {
    title,
    description,
    canonical = Astro.url.pathname,
    publishDate,
    modifiedDate,
    type = "website",
    tags = [],
    author = "Lucas Sifoni",
    lang = "en-US",
} = Astro.props;

const canonicalURL = new URL(canonical, Astro.site);
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<meta name="generator" content={Astro.generator} />

<!-- Localization -->
<meta name="geo.region" content="FR-OCC" />
<meta name="geo.placename" content="Toulouse" />
<meta name="geo.position" content="43.604652;1.444209" />
<meta name="ICBM" content="43.604652, 1.444209" />

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- RSS & Sitemap -->
<link
    rel="alternate"
    type="application/rss+xml"
    title="Lucas Sifoni"
    href={new URL("rss.xml", Astro.site)}
/>
<link rel="sitemap" href="/sitemap-index.xml" />

<!-- Primary Meta Tags -->
<title>{title.replace("<br/>", "")}</title>
<meta name="title" content={(title || "").replace("<br/>", "")} />
<meta name="description" content={description} />
<meta name="author" content={author} />
{tags.length > 0 && <meta name="keywords" content={tags.join(", ")} />}

<!-- Open Graph / Facebook -->
<meta property="og:type" content={type} />
<meta property="og:url" content={canonicalURL} />
<meta property="og:title" content={(title || "").replace("<br/>", "")} />
<meta property="og:description" content={description} />
{
    publishDate && (
        <meta
            property="article:published_time"
            content={new Date(publishDate).toISOString()}
        />
    )
}
{
    modifiedDate && (
        <meta
            property="article:modified_time"
            content={new Date(modifiedDate).toISOString()}
        />
    )
}
{
    tags.length > 0 &&
        tags.map((tag) => <meta property="article:tag" content={tag} />)
}

<!-- Twitter -->
<meta property="twitter:url" content={canonicalURL} />
<meta property="twitter:title" content={(title || "").replace("<br/>", "")} />
<meta property="twitter:description" content={description} />

<!-- Schema.org structured data -->
<script
    type="application/ld+json"
    set:html={JSON.stringify(
        type === "article"
            ? {
                  "@context": "https://schema.org",
                  "@type": "BlogPosting",
                  headline: (title || "").replace("<br/>", ""),
                  description: description,
                  datePublished: publishDate
                      ? new Date(publishDate).toISOString()
                      : null,
                  dateModified: modifiedDate
                      ? new Date(modifiedDate).toISOString()
                      : null,
                  author: {
                      "@type": "Person",
                      "@id": new URL("/#person", Astro.site).toString(),
                      name: author,
                      url: Astro.site?.toString(),
                      jobTitle: "Independent Elixir/BEAM Developer",
                      knowsAbout: [
                          "Elixir",
                          "BEAM",
                          "Programming",
                          "Optics",
                          "Astronomy",
                      ],
                      sameAs: [],
                      address: {
                          "@type": "PostalAddress",
                          addressLocality: "Toulouse",
                          addressRegion: "Occitanie",
                          addressCountry: "FR",
                      },
                  },
                  mainEntityOfPage: {
                      "@type": "WebPage",
                      "@id": canonicalURL.toString(),
                  },
                  keywords: tags.join(", "),
                  publisher: {
                      "@type": "Person",
                      "@id": new URL("/#person", Astro.site).toString(),
                      name: author,
                      url: Astro.site?.toString(),
                      logo: {
                          "@type": "ImageObject",
                          url: new URL("/favicon.png", Astro.site).toString(),
                      },
                  },
                  articleSection: tags.length > 0 ? tags[0] : "Technology",
                  wordCount: null,
                  inLanguage: lang,
              }
            : {
                  "@context": "https://schema.org",
                  "@type": ["WebSite", "Person"],
                  "@id": new URL("/#person", Astro.site).toString(),
                  name: "Lucas Sifoni",
                  description: description,
                  url: Astro.site?.toString(),
                  jobTitle: "Independent Elixir/BEAM Developer",
                  knowsAbout: [
                      "Elixir",
                      "BEAM",
                      "Programming",
                      "Optics",
                      "Astronomy",
                  ],
                  sameAs: [],
                  address: {
                      "@type": "PostalAddress",
                      addressLocality: "Toulouse",
                      addressRegion: "Occitanie",
                      addressCountry: "FR",
                  },
                  mainEntity: {
                      "@type": "Blog",
                      name: "Lucas Sifoni's Blog",
                      description: "Articles on programming, optics, astronomy",
                      url: new URL("/blog", Astro.site).toString(),
                      author: {
                          "@type": "Person",
                          "@id": new URL("/#person", Astro.site).toString(),
                          name: author,
                      },
                      inLanguage: lang,
                  },
              },
    )}
/>

<!-- Analytics -->
<script
    async
    defer
    data-domain="lucassifoni.info"
    src="https://stats.documents.design/js/plausible.js"></script>
